[{"E:\\Code\\portfolio\\src\\index.js":"1","E:\\Code\\portfolio\\src\\reportWebVitals.js":"2","E:\\Code\\portfolio\\src\\App.js":"3","E:\\Code\\portfolio\\src\\Components\\Planet.js":"4","E:\\Code\\portfolio\\src\\Components\\Stars.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":1660,"mtime":1614135188869,"results":"9","hashOfConfig":"7"},{"size":4122,"mtime":1614135240289,"results":"10","hashOfConfig":"7"},{"size":2500,"mtime":1614135229786,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"9d3klj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Code\\portfolio\\src\\index.js",[],["24","25"],"E:\\Code\\portfolio\\src\\reportWebVitals.js",[],"E:\\Code\\portfolio\\src\\App.js",[],"E:\\Code\\portfolio\\src\\Components\\Planet.js",["26"],"import React from 'react';\r\nimport * as THREE from \"three\";\r\n\r\nconst camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\nconst renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true});\r\n\r\nexport default class Planet extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // this.handleResize = this.handleResize.bind(this)\r\n    \r\n     \r\n  }\r\n  handleResize = () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight\r\n    camera.updateProjectionMatrix()\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n  }\r\n  \r\n    componentDidMount(){\r\n      window.addEventListener('resize', this.handleResize, false)\r\n\r\n      const getTextures = () => new Promise((resolve, reject)=>{\r\n        const textureArray = []\r\n        function loadDone(x) {\r\n          console.log(\"loader successfully completed loading task\");\r\n          resolve(textureArray); // it went ok!   \r\n        }\r\n        const loader = new THREE.TextureLoader();\r\n        loader.crossOrigin = \"Anonymous\"\r\n        const planetTextureLink = 'https://i.ibb.co/dGLgQhN/cyber-futuristic-city-fantasy-art-4k-da-2560x1440.jpg'\r\n        const moonTextureLink = 'https://i.postimg.cc/dQXDbxyL/planet-Texture.jpg'\r\n        const subMoonTextureLink = 'https://i.postimg.cc/dQXDbxyL/planet-Texture.jpg'\r\n        textureArray.push(loader.load(planetTextureLink, loadDone))\r\n        textureArray.push(loader.load(moonTextureLink, loadDone))\r\n        textureArray.push(loader.load(subMoonTextureLink, loadDone))\r\n      });\r\n      \r\n      getTextures().then(textureArray => {\r\n        //Scene, parent Object3D, camera\r\n        const scene = new THREE.Scene()\r\n        const planetSystem = new THREE.Object3D();\r\n        scene.add(planetSystem)\r\n        // const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.1, 1000 );\r\n        camera.position.z = 25;\r\n  \r\n        //Renderer\r\n        // const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true}); \r\n        renderer.setClearColor( 0x000000, 0 );\r\n        renderer.setSize( window.innerWidth, window.innerHeight ); document.getElementById(\"planet\").appendChild( renderer.domElement );  \r\n  \r\n        //Planet\r\n        const material = new THREE.MeshPhongMaterial( { map: textureArray[0] } ) \r\n        const geometry = new THREE.SphereGeometry( 5, 32, 32 );\r\n        const planetMesh = new THREE.Mesh( geometry, material );\r\n        planetSystem.add( planetMesh );\r\n       \r\n        //Moon\r\n        const moonOrbit = new THREE.Object3D();\r\n        moonOrbit.position.x = 12;\r\n        planetSystem.add(moonOrbit);\r\n        const moonMaterial = new THREE.MeshPhongMaterial( { map: textureArray[1] } );\r\n        const moonMesh = new THREE.Mesh(geometry, moonMaterial);\r\n        moonMesh.scale.set(0.2, 0.2, 0.2);\r\n        moonOrbit.add(moonMesh);\r\n  \r\n        //Submoon\r\n        const subMoonOrbit = new THREE.Object3D();\r\n        subMoonOrbit.position.x = 2;\r\n        moonOrbit.add(subMoonOrbit);\r\n        const subMoonMaterial = new THREE.MeshPhongMaterial( { map: textureArray[2] } );\r\n        const subMoonMesh = new THREE.Mesh(geometry, subMoonMaterial);\r\n        subMoonMesh.scale.set(0.06, 0.06, 0.06);\r\n        subMoonOrbit.add(subMoonMesh);\r\n  \r\n        //Lighting\r\n        const ambientlLight = new THREE.AmbientLight(0xFFFFFF, 0.05);\r\n        scene.add(ambientlLight);\r\n        const directionalLight = new THREE.DirectionalLight(0xFFFFFF, 0.95);\r\n        directionalLight.position.set(0, 10, 0);\r\n        directionalLight.target.position.set(-10, 0, -13);\r\n        scene.add(directionalLight);\r\n        scene.add(directionalLight.target);\r\n  \r\n        //Animation\r\n        const animate = function () {\r\n          requestAnimationFrame( animate );\r\n          planetSystem.rotation.y += 0.001;\r\n          subMoonOrbit.rotation.y += 0.01;\r\n          moonOrbit.rotation.y += 0.004;\r\n          renderer.render( scene, camera );\r\n        }\r\n        animate();\r\n      })\r\n    }\r\n  \r\n    render(){  \r\n        return(   \r\n            <div id=\"planet\"></div>\r\n        )\r\n    }\r\n  }","E:\\Code\\portfolio\\src\\Components\\Stars.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":8,"column":3,"nodeType":"33","messageId":"34","endLine":13,"endColumn":4},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]